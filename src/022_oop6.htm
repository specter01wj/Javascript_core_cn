<!DOCTYPE HTML>
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<title>Untitled Document</title>
		<script type=text/javascript charset=utf-8 >
			
			//原型的概念: 原型对象里的所有属性和方法 被所有构造函数实例化出来的对象所共享
			
			/*
			function Person(){
				
			}
			
			Person.prototype = {
				constructor:Person , 
				name: 'z3' , 
				age:  20 , 
				job : 'engineer' ,
				friends : ['z4','z5'] ,
				sayName : function(){alert('my name!')}
			};	
			
			
			var p1 = new Person();
			var p2 = new Person();	
			
			p1.friends.push('z6');
			p1.name = 'l7';
			alert(p2.name);
			//alert(p1.friends);
			//alert(p2.friends);
			// 原型里的属性和方法 被所有对象所共享: static
			*/
			
			// 组合使用原型和构造函数式 (定义一个类 开发时常用的方式)
			/*
			function Person(name , age , friends , job){
				this.name = name ; 
				this.age  = age ; 
				this.friends = friends ;
				this.job = job ;
			}
			
			Person.prototype = {
				constructor: Person , 
				sayName : function(){
					alert(this.name);
				}
			};
			
			var p1 = new Person('z3' , 20 , ['w5','l6'] , 'ass licker');
			var p2 = new Person('l4', 25 , ['w5','l6' ,'l7'] ,'boss');
			
			alert(p1.friends);
			p1.sayName();
			alert(p2.friends);
			p2.friends.push('z6');
			alert(p2.friends);
			alert(p1.friends);
			p2.sayName();
			*/
			
			//动态原型模式：(让你的代码 都封装到一起)
			
			/*
			function Person(name , age , friends , job){
				this.name = name ; 
				this.age  = age ; 
				this.friends = friends ;
				this.job = job ;
				
				//动态原型方法：
				if( typeof this.sayName != 'function'){
					Person.prototype.sayName = function(){
						alert(this.name);
					}
				}
			}	
			var p1 = new Person('z3' , 20 , ['w5','l6'] , 'ass licker');
			var p2 = new Person('l4', 25 , ['w5','l6' ,'l7'] ,'boss');
			
			alert(p1.friends);
			p1.sayName();
			alert(p2.friends);
			p2.friends.push('z6');
			alert(p2.friends);
			alert(p1.friends);
			p2.sayName();
			*/
			
			//稳妥构造函数式: durable object(稳妥对象) 非常安全的环境中
			// 1 没有公共属性 ， 2 不能使用this对象
			
			
			function Person(name , age , job){
					// 创建一个要返回的对象
					var obj = new Object();
					//可以定义一下私有的变量和函数 private
					var name = name ; 
					var sex = 'male';
					obj.saySex = function(){alert(sex)};
					//添加一个方法
					obj.sayName = function(){
						alert(name);
					}
					return obj ;				
			}
			var p1 = new Person('z3');
			p1.sayName();
			p1.saySex();
			/**/
			
			
				
			
		</script>
	</head>
	<body>
	</body>
</html>
